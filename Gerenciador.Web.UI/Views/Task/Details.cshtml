@model Gerenciador.Web.UI.Models.TaskViewModel
@using Gerenciador.Web.UI.Helpers
@using Newtonsoft.Json

@{
    ViewBag.Title = "Detalhes da Tarefa";
}

<section class="content invoice">
    <!-- title row -->
    <div class="row">
        <div class="col-xs-12">
            <h2 class="page-header">
                <i class="fa fa-file-text-o"> @Model.Name</i>
                @Html.DisplayStatus("taskStatus", @Model.Status.ToString(), "pull-right")
            </h2>
            <div class="progress progress">
                <div id="taskUpdateBar" class="progress-bar progress-bar-primary" role="progressbar" aria-valuenow="@Model.Progress" aria-valuemin="0" aria-valuemax="100" style="width: @Model.Progress%">
                    <span id="progressLegend" style="cursor:crosshair"><strong>@Model.Progress% Completo</strong></span>
                </div>
            </div>
        </div>
        <!-- /.col -->
    </div>
    <!-- info row -->
    <div class="row invoice-info">
        <div class="col-sm-4 invoice-col">
            <strong>Início </strong>
            <br />
            Criado: <strong>@Html.DisplayFor(model => model.CreatedAt)</strong><br>
            Data de Hoje: <strong>@DateTime.Now</strong><br /><hr />
            <strong>Término</strong><br>
            Expectativa inicial: <strong data-bind="text: Deadline()"></strong>
            <br>
            Data de término: <strong data-bind="text: EndDate()"></strong><br />
            Variação: <strong data-bind="text: Variation()"></strong>
        </div>
        <!-- /.col -->

        <div class="col-sm-4 invoice-col">
            <div class="box box-solid bg-light-blue-gradient">
                <div class="box-body no-padding" style="height:250px">
                    <!--The calendar -->
                    <div id="calendar" style="width: 100%"></div>
                </div>
                <!-- /.box-body -->
            </div>
        </div>
        <!-- /.col -->

        <div class="col-sm-4 invoice-col" id="actionsPanel">
            <strong>Ações </strong>
            <br />
            <a class="btn btn-app" id="btnEditTaskAction">
                <i class="fa fa-edit"></i>Conteúdo
            </a>
            <button class="btn btn-app" data-toggle="modal" data-target="#modalUpdateProgress">
                <i class="fa fa-play"></i>Progresso
            </button>
            <button class="btn btn-app" data-toggle="modal" data-target="#modalCreateSubTask">
                <i class="fa fa-arrow-circle-o-right"></i>Sub-Task
            </button>
            <button class="btn btn-app" data-toggle="modal" data-target="#modalCreateComment">
                <i class="fa fa-bullhorn"></i>Comentário
            </button>
            <button class="btn btn-app" data-toggle="modal" data-target="">
                <i class="fa fa-users"></i>Usuários
            </button>
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->

    <br />

    <div class="row">
        <div class="col-md-12">
            <blockquote data-bind="text: Description()"></blockquote>
        </div>
    </div>

    @*<h2>Micro tarefas</h2>
    <div id="subtasksContainer">
        @Html.Partial("~/Views/Task/_SubTaskWidget.cshtml", @Model.SubTasks)
    </div>*@

    <h2>Micro tarefas - Using knockout</h2>
    
    <div id="subtasksContainer" class="table-responsive">
        <table id="subtasks" class="table table-condensed table-striped table-bordered table-hover no-margin">
            <thead>
                <tr>
                    <th style="width: 5%">
                        <input class="no-margin" type="checkbox">
                    </th>
                    <th style="width: 22%" class="hidden-xs">Código</th>
                    <th style="width: 20%">Nome</th>
                    <th style="width: 15%" class="hidden-xs">Criação</th>
                    <th style="width: 15%" class="hidden-phone">Início</th>
                    <th style="width: 15%" class="hidden-phone">Término</th>
                    <th style="width: 8%" class="hidden-phone">Status</th>
                    <th style="width: 10%" class="hidden-phone"></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: SubTasks">
                 <tr data-bind='attr: {"data-id": Id}'>
                     <td>
                        <input class="no-margin" type="checkbox">
                    </td>
                    <td class="hidden-xs">
                        <span class="name" data-bind="text: Id"></span>
                    </td>
                    <td><span data-bind="text: Name"></span></td>
                    <td class="hidden-xs"><span data-bind="text: moment(CreatedAt()).format('L')"></span></td>
                    <td><span data-bind="text: moment(StartDate()).format('L')"></span></td>
                    <td><span data-bind="text: moment(ExpectedEndDate()).format('L')"></span></td>
                    <td data-bind="html: Status()"></td>
                    <td>
                        <div class="btn-group">
                            <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle" data-original-title="" title="">
                                Ações 
                                <span class="caret"></span>
                            </button>
                            <ul class="subtaskActions dropdown-menu pull-right" data-bind="html: Actions()">
                                <!-- Html Populated by knockout --> 
                            </ul>
                        </div>
                    </td>
                 </tr>
            </tbody>
        </table>
    </div>
    
    
    <div class="row">
        <!-- accepted payments column -->
        <div class="col-md-6">
            <div id="taskComments">
            </div>
        </div>
        <!-- /.col -->
        <div class="col-md-6">
            <div id="taskTimeline"></div>
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->

    <!-- this row will not appear when printing -->
    <div class="row no-print">
        <div class="col-xs-12">
            <button class="btn btn-default pull-right" onclick="window.print();"><i class="fa fa-print"></i>Imprimir</button>
            <button class="btn btn-success pull-right"><i class="fa fa-credit-card"></i>Edita</button>
            <button class="btn btn-primary pull-right" style="margin-right: 5px;"><i class="fa fa-download"></i>Gerar PDF</button>
        </div>
    </div>
</section>

<div class="row">
    <h2>Debug</h2>
    <div data-bind="text: ko.toJSON($data)"></div>
</div>

@Html.Partial("~/Views/Task/DetailsPopups.cshtml")

@section scripts{
    <script src="~/Scripts/custom/task/task_manager.js"></script>
    <script type="text/javascript">
        moment.locale('pt');
        var globalLocale = moment();
        $(document).ready(function () {
            @{
                var m = JsonConvert.SerializeObject(Model,
                            Formatting.None,
                            new JsonSerializerSettings() {
                                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                            });
                }
            
            var data = JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(m))");

            /*NOVA IMPL*/
            var _projectId = '@(Model.ProjectId)';
            var _taskId = '@(Model.Id)';
            TaskManagement.taskInit(data, _projectId, _taskId);
            /*NOVO IMPL*/

            @*var subTaskItem = function (options) {
                return {
                    Id: ko.observable(options.Id),
                    Name: ko.observable(options.Name),
                    CreatedAt: ko.observable(options.CreatedAt),
                    StartDate: ko.observable(options.StartDate),
                    ExpectedEndDate: ko.observable(options.ExpectedEndDate),
                    Status: ko.computed(function () {
                        var status = "desconhecida";
                        var cssLabel = "label label-default";
                        switch (options.Status) {
                            case 1:
                                status = "Aberta";
                                cssLabel = "label label-warning";
                                break;
                            case 3:
                                status = "Em andamento";
                                cssLabel = "label label-info";
                                break;
                            case 4:
                                status = "Completa";
                                cssLabel = "label label-success";
                                break;
                            case 5:
                                status = "Cancelada";
                                cssLabel = "label label-danger";
                                break;
                        }
                        return "<span class='" + cssLabel + "'" + ">" + status + "</span>";
                    }),
                    Actions: ko.computed(function () {
                        if (options.Status == 1) {
                            return '<li><a href="#" data-action="setDone">Pronta</a></li>' +
                            '<li><a href="#" data-action="setCancelled">Cancelar</a>' +
                            '</li><li class="divider"></li>' +
                            '<li><a href="#" data-action="edit">Editar</a></li>';
                        } else {
                            return '<li><a href="#" data-action="setOpen">Reabrir</a></li>'
                        }
                    })
                };
            }
            viewModel = {
                Deadline: ko.computed(function () {
                    var deadLine = moment(data.Deadline);
                    if (deadLine.isValid())
                        return deadLine.format('L');
                }),
                EndDate: ko.computed(function () {
                    var endDate = moment(data.EndDate);
                    if (endDate.isValid())
                        return endDate.format('L');
                }),
                Description: ko.observable(data.Description),

                //subtasks
                SubTasks: ko.observableArray(ko.utils.arrayMap(data.SubTasks, function (item) {
                    return subTaskItem(item);
                })),

                addSubtask: function () {
                    var dataToSend = { Name: this.subtaskNameToAdd, StartDate: this.subtaskStartDateToAdd, endDate: this.subtaskEndDateToAdd };

                    this._projectId = '@(Model.ProjectId)';
                    this._id = '@(Model.Id)';
                    dataToSend.projectId = this._projectId;
                    dataToSend.taskId = this._id;
                    
                    $.blockUI({ message: 'Carregando...' });
                    var posting = $.post('@Url.Action("CreateSubTaskV2", "Task")', dataToSend, 'json');
                    posting.done(function (result) {
                      
                        $('#modalCreateSubTask').modal('hide');
                        $('#txtSubTaskName').val('');
                        $('#txtStartDate').val('');
                        $('#txtEndDate').val('');
                        
                        var newSubTask = new subTaskItem(result);
                        viewModel.SubTasks.unshift(newSubTask);

                        LoadTimeline();
                        LoadCalendar();
                    });
                posting.always(function () {
                    $.unblockUI();
                });
                },
                subtaskNameToAdd: ko.observable(""),
                subtaskStartDateToAdd: ko.observable(""),
                subtaskEndDateToAdd: ko.observable("")
            };
            viewModel.Variation = ko.computed(function () {
                var end = moment(viewModel.EndDate());
                var deadline = moment(viewModel.Deadline());

                return moment.duration(end.diff(deadline)).asDays() + ' dias';
            });

            // Activates knockout.js
            ko.applyBindings(viewModel);

            var _projectId = '@(Model.ProjectId)';
            var _id = '@(Model.Id)';

            $('.slider').slider();
             
            LoadComments(_projectId, _id);
            LoadTimeline();
            LoadCalendar();

            //async load calendar dates
            function LoadCalendar() {
                $('#calendar').datepicker("remove");
                var gettingLimitDates = $.get('/Task/GetLimitDates', { projectId: _projectId, taskId: _id }, 'json');
                gettingLimitDates.done(function (result) {
                    var fixed = [];
                    result.forEach(function (entry) {
                        fixed.push({ start: new Date(entry.Start), end: new Date(entry.End), description: entry.Description });
                    });
                    $("#calendar").datepicker({
                        language: "pt-BR",
                        format: 'dd/mm/yyyy',
                        multidate: true,
                        todayHighlight: true,
                        beforeShowDay: function (date) {
                            var description ='';
                            var cssClass = '';
                            
                            fixed.forEach(function (entry) {
                                if (entry.end.getFullYear() == date.getFullYear() && entry.end.getMonth() == date.getMonth() && entry.end.getUTCDate() == date.getUTCDate()) {
                                    var today = new Date();
                                    var limitDate = new Date(entry.end.getFullYear(), entry.end.getMonth(), entry.end.getUTCDate());

                                    cssClass = limitDate >= today ? 'active' : 'whaoo';
                                    description += entry.description + "; ";
                                }
                            });

                            description = description || 'Não há eventos nessa data';
                            var dayValue = {
                                tooltip: description,
                                classes: cssClass
                            };

                            return dayValue;
                        }
                    });
                });
            }

            //Async Populates Comments 
            function LoadComments(_projectId, _taskId) {
                this.dataToSend = { projectId: _projectId, taskId: _taskId };
                $.ajax({
                    url: '@Url.Action("Index", "Comments")',
                    data: this.dataToSend,
                    contentType: 'application/html; charset=utf-8',
                    type: 'GET',
                    dataType: 'html'
                })
                .success(function (result) {
                    $('#taskComments').html(result);
                })
                .error(function (xhr, status) {
                    alert('erro status: ' + status);
                });
            }

            //async populates timeline
             function LoadTimeline() {
                $.ajax({
                    url: '@Url.Action("GetTimeline", "Task", new { taskId = @Model.Id })',
                    contentType: 'application/html; charset=utf-8',
                    type: 'GET',
                    dataType: 'html'
                })
                .success(function (result) {
                    $('#taskTimeline').html(result);
                })
                .error(function (xhr, status) {
                    alert('erro status: ' + status);
                });
            }

             //Update Progress
             $(".modal-footer").on("click", "#btnProgressSave", function () {
                 this._projectId = '@(Model.ProjectId)';
                this._id = '@(Model.Id)';
                var _valueToUpdate = $('#progressUpdaterSlider')[0].value
                var posting = $.post('/Task/UpdateProgress', { projectId: _projectId, id: _id, newValue: _valueToUpdate });
                posting.done(function (data) {
                    var dataToUpdate = data + '%';
                    $('#modalUpdateProgress').modal('hide')
                    $('#taskUpdateBar').width(dataToUpdate);
                    $("#progressLegend").html($('<strong/>').append(dataToUpdate + ' Completo'));
                    $('#taskUpdateBar').attr('aria-valuenow', data);
                    if (data == 100) {
                        $('#taskStatus').attr("class", "pull-right label label-success").html('completa');
                    } else {
                        $('#taskStatus').attr("class", "pull-right label label-warning").html('aberta');
                    }
                    LoadTimeline();
                });
            });

             //subtasks actions
            $("#subtasksContainer").on("click", "a", function (event) {
                event.preventDefault();
                var taskId = '@(Model.Id)';
                var subtaskId = $(this).closest('tr').data("id");
                var action = $(this).data("action");
                
                if (action == "setDone") {
                    ChangeTaskStatus(taskId, subtaskId, 4);
                } else if (action == "setCancelled") {
                    ChangeTaskStatus(taskId, subtaskId, 5);
                } else if (action == "setOpen") {
                    ChangeTaskStatus(taskId, subtaskId, 1);
                } else if (action == "edit") {
                    OpenEditScreen(taskId, subtaskId);
                }
             });

             //open edit screen
             function OpenEditScreen(_taskId, _subTaskId) {
                 var getting = $.get('/Task/EditSubTask', { taskId: _taskId, subTaskId: _subTaskId }, 'html');
                 getting.done(function (result) {
                     $('#modalEditSubTask').modal('show');
                     $('#editSubTask').html('');
                     $('#editSubTask').html(result);
                 });
             }

             //set subktask done
             function ChangeTaskStatus(_taskId, _subTaskId, _status) {
                 var posting = $.post('/Task/ChangeTaskStatus', { taskId: _taskId, subTaskId: _subTaskId, subkTaskStatus: _status }, 'html');
                 posting.done(function (result) {
                     $('#subtasksContainer').html('');
                     $('#subtasksContainer').html(result);
                     LoadTimeline();
                     LoadCalendar();
                 });
             }

            //Create Comments
             $(".modal-footer").on("click", "#btnCreateComment", function () {                 
                this._projectId = '@(Model.ProjectId)';
                this._id = '@(Model.Id)';

                var posting = $.post('@Url.Action("Create", "Comments")', {
                    projectId: this._projectId,
                    taskId: this._id,
                    content: $('#txtComment').val()
                });
                posting.done(function (result) {
                    this._projectId = '@(Model.ProjectId)';
                    this._id = '@(Model.Id)';
                    $('#modalCreateComment').modal('hide');
                    $('#txtComment').val('');
                    LoadComments(this._projectId, this._id);
                    LoadTimeline();
                    $.growlUI('operação realizada com sucesso...');
                });
            });

             //Edit SubTask
             $(".modal-footer").on("click", "#btnEditSubTask", function () {
                this._projectId = '@(Model.ProjectId)';
                this._id = '@(Model.Id)';
                $.blockUI({ message: 'Carregando...' });
                var posting = $.post('@Url.Action("EditSubTask", "Task")', $('#editSubtaskForm').serialize(), 'html');
                posting.done(function (result) {
                    $('#modalEditSubTask').modal('hide');
                    $('#subtasksContainer').html('');
                    $('#subtasksContainer').html(result);
                    LoadTimeline();
                    LoadCalendar();
                });
                 posting.always(function () {
                     $.unblockUI();
                 });
             });

             //open edit task
             $('#actionsPanel').on('click', '#btnEditTaskAction', function (event) {
                 event.preventDefault();
                 var _taskId = '@(Model.Id)';
                var getting = $.get('/Task/EditTask', { taskId: _taskId }, 'html');
                getting.done(function (result) {
                    $('#modalEditTask').modal('show');
                    $('#editTask').html('');
                    $('#editTask').html(result);
                });
             });

             //Edit task
             $(".modal-footer").on("click", "#btnEditTask", function () {
                 this._projectId = '@(Model.ProjectId)';
                 this._id = '@(Model.Id)';
                 $.blockUI({ message: 'Carregando...' });
                 var posting = $.post('@Url.Action("EditTask", "Task")', $('#editTaskForm').serialize(), 'json');
                 posting.done(function (result) {
                     $('#modalEditTask').modal('hide');

                     var data = $.parseJSON(result);
                     viewModel.Deadline(data.Deadline);
                     viewModel.EndDate(data.EndDate);
                     viewModel.Description(data.Description);

                     LoadCalendar();
                 });
                 posting.always(function () {
                     $.unblockUI();
                 });
             });*@
        });
    </script>
}
